var db = require('controllers/database');
var mongoose = require('mongoose');
var drivers = mongoose.model('drivers');
var method	= require('../../route/methods');
var crypto = require('crypto');
var rand = require('csprng');

exports.login = function(email,password,callback){
  drivers.find({email: email},function(err,data){
    if(data.length != null){
      var token = data[0]._id;
      var fname = data[0].fname;
      var lname = data[0].lname;
      var picture = data[0].picture;
      var hash_db = data[0].password;
      var temp = data[0].salt;
      var connected = data[0].connected;
      var account = data[0].account;
      var hashed_password = crypto.createHash('sha512').update(temp + password).digest("hex");
      if(hash_db == hashed_password){
        if(!connected){
          if (account) {
            var keyVitual = method.keyVirtual();
            var key = method.key(keyVitual);
            drivers.update({_id:token},{$set:{connected:true}},{multi:true},function(err){
              if(err){
                callback({'res':false,'response':"Error Drivers, you have not connected this user."});
              }else{
                callback({'res':true,'response':"Successfully Drivers, login.",'key':keyVitual,
                  'token':token,'fname':method.encode(fname,key),'lname':method.encode(lname,key),'picture':picture});
              }
            });
          } else {
            callback({'res':false,'response':"Error Drivers, your account is disabled."});
          }
        }else{
          callback({'res':false,'response':"Error Drivers, the user is logged into another device."});
        }
      }else{
        callback({'res':false,'response':"Error Drivers, invalid password."});
      }
    }else{
      callback({'res':false,'response':"Error Drivers, user not exist."});
    }
  });
}

exports.profile = function(token,callback){
  drivers.find({_id:token},function(err,data){
    if(data.length != 0){
      var fname = data[0].fname;
      var lname = data[0].lname;
      var gender = data[0].gender;
      var dateN = data[0].dateN;
      var country = data[0].country;
      var city = data[0].city;
      var email = data[0].email;
      var phone = data[0].phone;
      var pt = (data[0].pt).toString();
      var ptt = (data[0].ptt).toString();
      var picture = data[0].picture;
      var keyVitual = method.keyVirtual();
      var key = method.key(keyVitual);
      callback({'res':true,'key':keyVitual,'fname':method.encode(fname,key),'lname':method.encode(lname,key),
        'gender':method.encode(gender,key),'dateN':method.encode(dateN,key),'country':method.encode(country,key),
        'city':method.encode(city,key),'email':method.encode(email,key),'phone':method.encode(phone,key),
        'pt':method.encode(pt,key),'ptt':method.encode(ptt,key),'picture':picture});
    }else{
      callback({'res':false});
    }
  });
}

exports.logout = function(token,callback){
  drivers.update({_id:token},{$set:{connected:false}},{multi:true},function(err){
    if(err){
      callback({'res':false});
    }else{
      callback({'res':true});
    }
  });
}

exports.signup = function(fname,lname,gender,dateN,country,city,email,password,phone,picture,callback){
  var temp = rand(160,36);
  var hashed_password = crypto.createHash('sha512').update(temp + password).digest("hex");
  var newUser = new drivers({fname:fname,lname:lname,gender:gender,dateN:dateN,country:country,city:city,email:email,
    password:hashed_password,phone:phone,pt:0,ptt:1,picture:picture,connected:false,life:0,account:true,salt:temp });
  drivers.find({email: email},function(err,data){
    if(data.length == 0){
      newUser.save(function(err){
          if(err){
            callback({'res':false,'response':"Error Driver, you have not added a new user."});
          }else{
            callback({'res':true,'response':"Successfully Driver, you have added a new user."});
          }
        });
    }else{
      callback({'res':false,'response':"Error Driver, Email already registered."});
    }
  });
}

exports.disableAccount = function(token,callback){
  drivers.update({_id:token},{$set:{connected:false,account:false}},{multi:true},function(err){
    if(err){
      callback({'res':false});
    }else{
      callback({'res':true});
    }
  });
}

exports.disableAccountAdmin = function(token,callback){
  drivers.find({_id:token},function(err,data){
    if(data.length != 0){
      var account = data[0].account;
      if(account){
        drivers.update({_id:token},{$set:{connected:false,account:false}},{multi:true},function(err){
          if(err){
            callback({'res':false});
          }else{
            callback({'res':true,'response':"Successfully Driver, you have disable account."});
          }
        });
      }else{
        drivers.update({_id:token},{$set:{connected:false,account:true}},{multi:true},function(err){
          if(err){
            callback({'res':false});
          }else{
            callback({'res':true,'response':"Successfully Driver, you have activate account."});
          }
        });
      }
    }
  });
}

exports.getDriver = function(token,callback){
  drivers.find({_id:token},function(err,data){
    if(data.length != 0){
      var emptyTaxi = false;
      var position = 0;
      for (i = 0; i < data[0].taxis.length; i++) {
        var working = data[0].taxis[i].working;
        if (working) {
          emptyTaxi = true;
          position = i;
          break;
        }
      }
      if (emptyTaxi) {
        var fname = data[0].fname;
        var lname = data[0].lname;
        var dateN = data[0].dateN;
        var pt = (data[0].pt).toString();
        var ptt = (data[0].ptt).toString();
        var picture = data[0].picture;
        var model = data[0].taxis[position].model;
        var serial = data[0].taxis[position].serial;
        var places = (data[0].taxis[position].places).toString();
        var luggages = (data[0].taxis[position].luggages).toString();
        var keyVitual = method.keyVirtual();
        var key = method.key(keyVitual);
        callback({'res':true,'key':keyVitual,'fname':method.encode(fname,key),'lname':method.encode(lname,key),
          'dateN':method.encode(dateN,key),'pt':method.encode(pt,key),'ptt':method.encode(ptt,key),'picture':picture,
          'model':method.encode(model,key),'serial':method.encode(serial,key),
          'places':method.encode(places,key),'luggages':method.encode(luggages,key)});
      } else {
        callback({'res':false});
      }
    }else{
      callback({'res':false});
    }
  });
}

exports.getTaxi = function(token,callback){
  drivers.find({_id:token},{_id:0,taxis:1}).sort({'taxis.date':-1}).exec(function(err,data){
		if(data.length != 0){
      var dataTaxi = [];
      for (i = 0; i < data[0].taxis.length; i++) {
        var idTaxi = data[0].taxis[i].idTaxi;
        var model = data[0].taxis[i].model;
        var serial = data[0].taxis[i].serial;
        var places = data[0].taxis[i].places;
        var luggages = data[0].taxis[i].luggages;
        var date = data[0].taxis[i].date;
        var working = data[0].taxis[i].working;
        dataTaxi.push({'_id':idTaxi,'model':model,'serial':serial,'places':places,'luggages':luggages,
          'date':date,'working':working});
      }
      var x = [{taxis : dataTaxi}];
			callback({'res':true,'data':x});
		}else{
			callback({'res':false});
		}
	});
}

exports.editTaxiFromDriver = function(token,idTaxi,working,callback){
  drivers.update({_id:token,'taxis.idTaxi':idTaxi},{$set:{'taxis.$.working':working}},function(err){
    if(err){
      callback({'res':false,'response':"Error Taxi, you have not edited the taxi."});
    }else{
      callback({'res':true,'response':"Successfully Taxi, you have edited the taxi."});
    }
	});
}

exports.haveTaxi = function(token,callback){
  drivers.find({_id:token},{_id:0,taxis:1},function(err,data){
    if(data.length != 0){
      var x = false;
      for (i = 0; i < data[0].taxis.length; i++) {
        var working = data[0].taxis[i].working;
        if (working) {
          x = true;
          break;
        }
      }
      if (x) {
        callback({'res':true});
      } else {
        callback({'res':false});
      }
		}else{
			callback({'res':false});
		}
	});
}

exports.disableAccountBook = function(token,callback){
  drivers.find({_id:token},{_id:0,life:1},function(err,data){
    if(data.length != 0){
      if (data[0].life < 3) {
        drivers.update({_id:token},{$inc:{life:1}},function(err){
          if(err){
            callback({'res':false});
          }else{
            callback({'res':true});
          }
        });
      } else if (data[0].life == 3) {
        drivers.update({_id:token},{$set:{account:false}},{multi:true},function(err){
          if(err){
            callback({'res':false});
          }else{
            callback({'res':true});
          }
        });
      }
		} else {
			callback({'res':false});
		}
	});
}

exports.getAllDrivers = function(callback){
  drivers.find({},{_id:1,fname:1,lname:1,city:1,dateN:1},function(err,doc){
		if (doc.length != 0) {
      callback({'res':true,'data':doc});
    } else {
      callback({'res':false});
    }
  });
}

exports.editAge = function(token,date,callback){
  drivers.update({_id:token},{$set:{dateN:date}},{multi:true},function(err){
    if(err){
      callback({'res':false});
    }else{
      callback({'res':true});
    }
  });
}

exports.editPhone = function(token,phone,callback){
  drivers.update({_id:token},{$set:{phone:phone}},{multi:true},function(err){
    if(err){
      callback({'res':false});
    }else{
      callback({'res':true});
    }
  });
}