var db = require('controllers/database');
var mongoose = require('mongoose');
var taxicabs = mongoose.model('taxicabs');
var drivers = mongoose.model('drivers');
var pubs = mongoose.model('pubs');
var method	= require('../../route/methods');

exports.getAllTaxi = function(callback){
  taxicabs.find({},function(err,doc){
		if (doc.length != 0) {
      callback({'res':true,'data':doc});
    } else {
      callback({'res':false});
    }
  });
}

exports.getOneTaxi = function(serial,callback){
  taxicabs.find({serial:{$regex:new RegExp(serial.toLowerCase(), "i")}},function(err,doc){
		if (doc.length != 0) {
      callback({'res':true,'data':doc});
    } else {
      callback({'res':false});
    }
  });
}

exports.deleteTaxi = function(id,callback){
  taxicabs.remove({_id:id},function(err,data){
    if (err) {
      callback({'res':false,'response':"Error Taxi, you have not deleted a taxi."});
    } else {
      callback({'res':true,'response':"Successfully Taxi, you have deleted a taxi."});
    }
  });
}

exports.renewalTaxi = function(id,callback){
  drivers.find({taxis:{$elemMatch:{idTaxi:id}}},{pt:1,ptt:1},function(err,data){
    var d = new Date();
    var date = (d.getFullYear() + 1) + "/" + (d.getMonth() + 1) + "/" + d.getDate();
    if(data.length != 0){
      var ptTotal = 0; var pttTotal = 0;
      for (i = 0; i < data.length; i++) {
        ptTotal += data[i].pt;
        pttTotal += data[i].ptt;
      }
      var type = '';
      if (ptTotal/pttTotal < 0.3) {
        type = 'bad';
      } else if (ptTotal/pttTotal >= 0.3 && ptTotal/pttTotal < 0.7 ) {
        type = 'medium';
      } else if (ptTotal/pttTotal >= 0.7) {
        type = 'good';
      }
      pubs.find({type:type},function(err,doc){
        if(doc.length != 0){
          var pubname = doc[Math.floor((Math.random() * doc.length))].name;
          taxicabs.update({_id:id},{$set:{pub:pubname,dateExp:date}},function(err){
            if(err){
              callback({'res':false,'resp':'ee4'});
            }else{
              callback({'res':true});
            }
          });
        }else{
          callback({'res':false,'resp':'ee3'});
        }
      });
    }else{
      pubs.find({},function(err,doc){
        if(doc.length != 0){
          var pubname = doc[0].name;
          taxicabs.update({_id:id},{$set:{pub:pubname,dateExp:date}},function(err){
            if(err){
              callback({'res':false,'resp':'ee2'});
            }else{
              callback({'res':true});
            }
          });
        }else{
          callback({'res':false,'resp':'ee1'});
        }
      });
    }
  });
}

exports.addTaxi = function(mark,model,serial,places,luggages,date,callback){
  var newTaxi = new taxicabs({mark:mark,model:model,serial:serial,places:places,luggages:luggages,date:date,pub:null,dateExp:null});
  taxicabs.find({serial:serial},function(err,data){
    if(data.length == 0){
      newTaxi.save(function(err){
          if(err){
            callback({'res':false,'response':"Error Taxi, you have not added a new taxi."});
          }else{
            callback({'res':true,'response':"Successfully Taxi, you have added a new taxi."});
          }
        });
    }else{
      callback({'res':false,'response':"Error Taxi, the serial already registered."});
    }
  });
}

exports.getTaxi = function(serial,callback){
  taxicabs.find({serial: serial},function(err,doc){
		if (doc.length != 0) {
      var keyVitual = method.keyVirtual();
      var key = method.key(keyVitual);
      var idTaxi = doc[0]._id;
      var mark = method.encode(doc[0].mark,key);
      var model = method.encode(doc[0].model,key);
      var serial = method.encode(doc[0].serial,key);
      var places = method.encode((doc[0].places).toString(),key);
      var luggages = method.encode((doc[0].luggages).toString(),key);
      callback({'res':true,'key':keyVitual,'_id':idTaxi,'mark':mark,'model':model,'serial':serial,'places':places,
      'luggages':luggages});
    }else{
      callback({'res':false});
    }
  });
}

exports.addTaxiToDriver = function(token,idTaxi,callback){
  taxicabs.find({_id:idTaxi},function(err,data){
		if(data.length != 0){
      var d = new Date();
      var m = d.getMonth() + 1;
      var month = (m<10) ? "0" + m : m;
      var date = d.getFullYear() + "/" + month + "/" + d.getDate() + " "
      + d.getHours() + ":" + d.getMinutes() + ":" + d.getSeconds();

      var model = data[0].model;
      var serial = data[0].serial;
      var places = data[0].places;
      var luggages = data[0].luggages;
      drivers.find({_id:token,'taxis.serial':{$nin:serial}},function(err,dataDriver){
        if (err) {
          callback({'res':false,'response':"Error Taxi, you have the serial of taxi is not exist."});
        } else {
          if (dataDriver.length != 0) {
            if (dataDriver[0].taxis.length != 0) {
              drivers.update({_id:token,'taxis.working':true},{$set:{'taxis.$.working':false}},function(err){
                if(err){
                  callback({'res':false,'response':"Error Taxi, you have not added a new taxi."});
                }else{
                  drivers.update({_id:token},{$push:{taxis:{idTaxi:idTaxi,model:model,serial:serial,places:places,luggages:luggages,date:date,working:true}}},function(err){
                    if(err){
                      callback({'res':false,'response':"Error Taxi, you have not added a new taxi."});
                    }else{
                      callback({'res':true,'response':"Successfully Taxi, you have added a new taxi."});
                    }
                  });
                }
              });
            } else {
              drivers.update({_id:token},{$push:{taxis:{idTaxi:idTaxi,model:model,serial:serial,places:places,luggages:luggages,date:date,working:true}}},function(err){
                if(err){
                  callback({'res':false,'response':"Error Taxi, you have not added a new taxi."});
                }else{
                  callback({'res':true,'response':"Successfully Taxi, you have added a new taxi."});
                }
              });
            }
          } else {
            callback({'res':false,'response':"Error Taxi, you have the taxi."});
          }
        }
      });
    }else{
      callback({'res':false,'response':"Error 2"});
    }
  });
}
